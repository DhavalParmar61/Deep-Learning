# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yvho9tHqeHZzulw3O5VQCVnhztXYqgNW
"""

import numpy as np
import pdb
import os
from matplotlib import pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator

def create_MLP():
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=(28, 28 ,1)),
        keras.layers.Dense(128, activation='relu'),
        keras.layers.Dense(128, activation='relu'),
        keras.layers.Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

def gaussian_noise_layer(input_image, std):
    noise = tf.random.normal(shape=tf.shape(input_image), mean=0.0, stddev=std, dtype=tf.float32)
    return input_image + noise

if __name__ == "__main__":

    fashion_mnist = keras.datasets.fashion_mnist
    (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
    train_images = train_images.astype('float32') / 255
    test_images = test_images.astype('float32') / 255
    train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
    test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

    model = create_MLP()

    number_epochs=30
    history = model.fit(train_images, train_labels, epochs=number_epochs,validation_split=0.2)
    plt.plot(history.history['loss'],label="Training Loss")
    plt.plot(history.history['val_loss'],label="Validation Loss")
    plt.title('Training Data')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.show()
    model.save('./MLP_model.h5')

loss, acc = model.evaluate(test_images, test_labels)